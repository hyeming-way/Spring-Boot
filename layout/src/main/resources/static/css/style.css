/* 전체 문서 스타일 */
body {
    font-family: 'Arial', sans-serif; /* 'Arial' 폰트를 사용하고, Arial이 없을 경우 기본 sans-serif 폰트를 사용합니다. sans-serif는 모서리가 부드러운 글꼴입니다. 예: Arial, Verdana 등. */
    margin: 0; /* 모든 브라우저의 기본 여백을 제거하여 페이지가 화면의 맨 위와 왼쪽에 붙도록 설정합니다. 이렇게 하면 레이아웃이 더 정밀해집니다. */
    padding: 0; /* 모든 브라우저의 기본 패딩을 제거하여 페이지가 화면의 맨 위와 왼쪽에 붙도록 설정합니다. 불필요한 여백을 제거하여 전체 레이아웃을 컨트롤합니다. */
    background-color: #f0f4f8; /* 배경색을 연한 파란색(#f0f4f8)으로 설정하여 부드러운 느낌을 줍니다. 사용자의 시각적 피로를 줄여줍니다. */
}

/* 헤더 스타일 */
header {
    background-color: #4CAF50; /* 헤더의 배경색을 녹색(#4CAF50)으로 설정합니다. 신뢰와 생기를 상징합니다. */
    color: white; /* 헤더 텍스트 색상을 흰색으로 설정합니다. 배경과 텍스트 색상의 대비를 높여 가독성을 좋게 합니다. */
    padding: 20px; /* 헤더의 내부 여백을 20픽셀로 설정하여 내용이 가장자리에 붙지 않도록 합니다. 이렇게 하면 레이아웃이 깔끔해집니다. */
    text-align: center; /* 헤더 내의 텍스트를 중앙 정렬합니다. 모든 화면 크기에서 텍스트가 가운데에 위치하게 됩니다. */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* 헤더 아래쪽에 그림자 효과를 추가하여 입체감을 줍니다. (가로 방향 그림자 없음, 세로 방향 2픽셀, 블러 반경 5픽셀, 투명도 20%) */
}

/* 하단부 스타일 */
footer {
    background-color: #000000; /* 하단부 배경색을 검정색(#000000)으로 설정합니다. 어두운 배경은 페이지 하단을 강조합니다. */
    color: white; /* 하단부 텍스트 색상을 흰색으로 설정합니다. 대비를 높여 가독성을 좋게 합니다. */
    text-align: center; /* 하단부 텍스트를 중앙 정렬합니다. 모든 화면 크기에서 텍스트가 가운데에 위치하게 됩니다. */
    padding: 20px; /* 하단부 내부 여백을 20픽셀로 설정하여 내용이 가장자리에 붙지 않도록 합니다. 이렇게 하면 레이아웃이 깔끔해집니다. */
    box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2); /* 하단부 위쪽에 그림자 효과를 추가하여 입체감을 줍니다. (가로 방향 그림자 없음, 세로 방향 -2픽셀, 블러 반경 5픽셀, 투명도 20%) */
}

footer p {
    margin: 0; /* 하단부 단락의 기본 여백을 제거합니다. 기본 여백으로 인한 불필요한 공간을 없애줍니다. */
    font-size: 14px; /* 하단부 텍스트 크기를 14픽셀로 설정합니다. 적절한 크기로 가독성을 높입니다. */
}

/* 내비게이션 스타일 */
nav ul {
    list-style-type: none; /* 목록 스타일을 제거하여 불릿 포인트를 숨깁니다. 사용자 정의 스타일을 적용할 수 있게 됩니다. */
    padding: 0; /* 목록 내부 패딩을 제거합니다. 불필요한 공간을 없앱니다. */
}

nav ul li {
    display: inline; /* 목록 항목을 가로로 배치합니다. 수평으로 나열됩니다. */
    margin-right: 15px; /* 목록 항목 간의 오른쪽 여백을 15픽셀로 설정합니다. 항목 사이에 간격을 줍니다. */
}

nav ul li a {
    color: white; /* 링크 텍스트 색상을 흰색으로 설정합니다. 배경과 대비되어 잘 보입니다. */
    text-decoration: none; /* 링크 밑줄을 제거합니다. 깔끔한 디자인을 위해 밑줄을 없앱니다. */
    font-weight: bold; /* 링크 텍스트를 굵게 설정합니다. 강조 효과를 줍니다. */
    transition: color 0.3s; /* 텍스트 색상이 0.3초 동안 부드럽게 변화하도록 설정합니다. (애니메이션 효과 적용) */
}

nav ul li a:hover {
    color: #e0e0e0; /* 마우스 오버 시 링크 텍스트 색상을 연한 회색(#e0e0e0)으로 변경합니다. 사용자 인터랙션을 시각적으로 표시합니다. */
}

/* 본문 스타일 */
main {
    padding: 20px; /* 본문 내부 여백을 20픽셀로 설정합니다. 내용이 가장자리에 붙지 않도록 합니다. */
}

/* 카드 컨테이너 스타일 */
.card-container {
    display: flex; /* 플렉스 박스 레이아웃을 사용하여 자식 요소를 배치합니다. 플렉스 레이아웃은 유연하고 강력합니다. */
    flex-wrap: wrap; /* 카드가 가득 차면 다음 줄로 넘어가도록 설정합니다. 각 줄에 맞춰 정렬됩니다. */
    justify-content: space-around; /* 카드 간의 간격을 조정하여 균등하게 분배합니다. 자식 요소가 화면 너비에 맞게 분산됩니다. */
}

/* 개별 카드 스타일 */
.card {
    background-color: #ffffff; /* 카드 배경색을 흰색(#ffffff)으로 설정합니다. 깔끔한 디자인을 제공합니다. */
    border-radius: 10px; /* 카드 모서리를 둥글게 설정합니다. (10픽셀 반경) 둥근 모서리는 부드러운 느낌을 줍니다. */
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* 카드에 부드러운 그림자 효과를 추가하여 입체감을 줍니다. (가로 방향 0, 세로 방향 4픽셀, 블러 반경 20픽셀, 투명도 10%) */
    padding: 20px; /* 카드 내부 여백을 20픽셀로 설정합니다. 내용이 가장자리에 붙지 않도록 합니다. */
    text-align: center; /* 카드 내 텍스트를 중앙 정렬합니다. 모든 화면 크기에서 텍스트가 가운데에 위치하게 됩니다. */
    flex: 0 1 calc(25% - 20px); /* 카드 너비를 화면 너비의 25%로 설정하고, 여백을 고려하여 계산합니다. 이 설정으로 4개의 카드가 한 줄에 균등하게 배치됩니다. */
    margin: 10px; /* 카드 간의 간격을 10픽셀로 설정합니다. 각 카드 사이에 공간을 만듭니다. */
    transition: transform 0.3s ease; /* 카드가 이동할 때 0.3초 동안 부드럽게 애니메이션 효과를 적용합니다. (ease 함수 사용, 부드러운 시작과 종료) */
}

/* 프로필 이미지 스타일 */
.profile-img {
    border-radius: 50%; /* 프로필 사진을 원형으로 설정합니다. (50% 반경) 원형 이미지는 프로필 사진에서 많이 사용됩니다. */
    width: 100px; /* 프로필 사진의 너비를 100픽셀로 설정합니다. 크기가 고정됩니다. */
    height: 100px; /* 프로필 사진의 높이를 100픽셀로 설정합니다. 크기가 고정됩니다. */
    margin-bottom: 15px; /* 사진 아래에 15픽셀의 여백을 추가합니다. */
}


/* 반응형 디자인 */
/*
미디어 쿼리
미디어 쿼리는 특정 조건(예: 화면 너비)에 따라 CSS 스타일을 적용하는 방법입니다. 
여기서 사용된 미디어 쿼리는 화면 크기에 따라 반응형 레이아웃을 구현하기 위한 것입니다.

@media (max-width: 1024px):

화면 너비가 1024픽셀 이하일 때 적용됩니다. 큰 화면에서 3개의 카드가 한 줄에 배치되도록 조정합니다.

@media (max-width: 768px):

화면 너비가 768픽셀 이하일 때 적용됩니다. 중간 크기 화면에서 2개의 카드가 한 줄에 배치되도록 조정합니다.

@media (max-width: 480px):

화면 너비가 480픽셀 이하일 때 적용됩니다. 작은 화면, 특히 모바일에서 각 카드가 한 줄에 하나씩 배치되도록 조정합니다.

flex 속성
flex 속성은 CSS Flexbox 레이아웃을 사용하여 요소의 유연성과 너비를 설정합니다.

0 (flex-grow):

요소가 컨테이너의 남는 공간을 차지하지 않도록 설정합니다. 즉, 다른 요소가 성장할 때 이 요소는 크기가 변하지 않습니다.

1 (flex-shrink):

요소가 컨테이너 크기에 따라 축소될 수 있도록 설정합니다. 즉, 공간이 부족할 때 이 요소는 축소될 수 있습니다.

calc() 함수:

calc() 함수는 CSS에서 값을 동적으로 계산할 때 사용됩니다. 여기서는 요소의 너비를 계산하는 데 사용됩니다.

예를 들어, calc(33% - 20px)는 요소의 기본 너비를 화면 너비의 33%로 설정하고, 여백을 고려하여 20픽셀을 뺀 값을 너비로 설정합니다.


*/
/* 화면 너비가 1024픽셀 이하일 때 (큰 화면을 기준으로) */
@media (max-width: 1024px) {
    .card {
        /* 
        flex: 0 1 calc(33% - 20px)
        flex는 **Flexbox**라는 CSS 레이아웃 시스템을 사용할 때 요소를 어떻게 배치할지 설정하는 속성입니다.
        flex의 3가지 주요 값:
        1. 첫 번째 값 `0`: **flex-grow** 값으로, 이 값은 남는 공간을 요소가 얼마나 차지할지 결정합니다.
           `0`은 "남는 공간을 차지하지 않겠다"는 의미입니다. 즉, 요소의 크기는 지정된 크기 그대로 유지됩니다.
        2. 두 번째 값 `1`: **flex-shrink** 값으로, 이 값은 요소가 너무 커졌을 때 축소될 수 있는 정도를 설정합니다.
           `1`은 "요소가 필요하면 축소될 수 있다"는 의미입니다.
        3. 세 번째 값 `calc(33% - 20px)`:
           - `33%`는 화면 너비의 33% 크기를 의미합니다.
           - `- 20px`는 카드 사이에 여백(마진)을 20px 만큼 두기 위해서 그만큼 너비를 빼는 계산을 합니다.
           예를 들어, 화면 너비가 1024px이라면, 카드 하나의 너비는 약 333px 정도가 되고, 카드 사이에 20px 간격이 생깁니다.
        이 설정은 화면이 1024px 이하일 때, 한 줄에 **3개의 카드**가 나란히 표시되도록 합니다.
        */
        flex: 0 1 calc(33% - 20px);
    }
}

/* 화면 너비가 768픽셀 이하일 때 (중간 크기 화면을 기준으로) */
@media (max-width: 768px) {
    .card {
        /* 
        flex: 0 1 calc(50% - 20px)
        이 설정은 flexbox로 카드의 크기를 결정합니다.
        1. 첫 번째 값 `0`: **flex-grow**로, 남는 공간을 차지하지 않도록 설정합니다.
        2. 두 번째 값 `1`: **flex-shrink**로, 필요한 경우 카드가 축소될 수 있도록 설정합니다.
        3. 세 번째 값 `calc(50% - 20px)`:
           - `50%`는 화면 너비의 절반을 의미합니다.
           - `- 20px`는 카드 사이에 20px 여백을 두기 위해서 빼는 값입니다.
           예를 들어, 화면 너비가 768px이라면, 카드 하나의 너비는 약 368px 정도가 되고, 20px 간격을 빼면 카드 사이 간격을 유지할 수 있습니다.
        이 설정은 화면이 768px 이하일 때, 한 줄에 **2개의 카드**가 나란히 배치되도록 합니다.
        */
        flex: 0 1 calc(50% - 20px);
    }
}

/* 화면 너비가 480픽셀 이하일 때 (작은 화면을 기준으로) */
@media (max-width: 480px) {
    .card {
        /* 
        flex: 0 1 calc(100% - 20px)
        flexbox를 사용한 카드 크기 설정입니다.
        1. 첫 번째 값 `0`: **flex-grow**로, 남는 공간을 차지하지 않도록 설정합니다.
        2. 두 번째 값 `1`: **flex-shrink**로, 필요한 경우 카드가 축소될 수 있도록 설정합니다.
        3. 세 번째 값 `calc(100% - 20px)`:
           - `100%`는 화면 너비의 100%를 의미합니다.
           - `- 20px`는 카드 사이에 여백을 두기 위해 빼는 값입니다.
           예를 들어, 화면 너비가 480px이라면, 카드 하나의 너비는 460px 정도가 되고, 카드 간 간격을 유지하려면 여백을 빼야 합니다.
        이 설정은 화면이 480px 이하일 때, 각 카드가 **100% 크기**로 한 줄에 하나씩 표시되도록 합니다. 
        즉, 스마트폰 화면처럼 작은 화면에서 한 카드씩 차례대로 표시됩니다.
        */
        flex: 0 1 calc(100% - 20px);
    }
}
/*

### 핵심 내용 요약

- **flex-grow**: 이 값은 "남는 공간을 카드가 차지할 수 있느냐?"를 결정합니다. `0`이면 남는 공간을 차지하지 않겠다고 설정합니다.
- **flex-shrink**: 이 값은 "카드가 너무 커져서 공간이 부족하면 축소할 수 있느냐?"를 결정합니다. `1`이면 필요시 카드가 줄어들 수 있습니다.
- **calc()**: `calc()`는 계산을 이용해 동적인 크기를 설정할 때 사용됩니다. 예를 들어, 화면 크기의 일정 비율로 설정하되, 여백(마진)을 빼고 싶을 때 유용합니다.

이렇게 `flex` 속성을 통해 화면 크기에 맞춰 카드의 크기와 배치 방식을 동적으로 조정하여, 다양한 화면 크기에서 카드들이 적절하게 나열되도록 합니다.
*/

