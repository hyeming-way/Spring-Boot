<?xml version="1.0" encoding="UTF-8"?>
<!-- XML 선언문: 이 문서는 XML 형식이며, UTF-8 문자 인코딩을 사용합니다.
     (한글도 깨지지 않고 처리할 수 있는 범용 인코딩 방식) -->

<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- 프로젝트의 루트 요소입니다.
       이 내부에 전체 설정이 담깁니다. 
       xmlns: XML 문법을 검증할 때 사용하는 주소(URL)로, 거의 고정입니다. -->

  <modelVersion>4.0.0</modelVersion>
  <!-- 이 POM 파일의 형식 버전입니다. Maven에서 항상 4.0.0 사용합니다. -->

  <!-- ✅ Spring Boot의 부모 설정 상속 -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <!-- Spring Boot 라이브러리 그룹 이름 (회사나 조직 단위의 ID) -->
    <artifactId>spring-boot-starter-parent</artifactId>
    <!-- Spring Boot의 기본 설정을 모아둔 모듈 이름 -->
    <version>3.4.0</version>
    <!-- 사용할 Spring Boot 버전 (중요: 버전에 따라 지원하는 기능 달라짐) -->
    <relativePath/>
    <!-- 로컬 경로가 아닌 Maven 중앙 저장소에서 이 설정을 찾겠다는 의미 -->
  </parent>

  <!-- ✅ 프로젝트의 기본 정보 -->
  <groupId>net.skhu</groupId>
  <!-- 이 프로젝트를 만든 단체/학교의 도메인 기반 ID (역순 사용 권장) -->

  <artifactId>hello</artifactId>
  <!-- 프로젝트 이름이자 빌드 시 생성되는 파일 이름 (hello.war) -->

  <version>0.0.1-SNAPSHOT</version>
  <!-- 프로젝트 버전. SNAPSHOT은 "아직 개발 중"이라는 의미입니다. 정식 배포 시는 'RELEASE' 사용 -->

  <packaging>war</packaging>
  <!-- 웹 애플리케이션으로 배포하기 위해 WAR 형식을 사용합니다.
       JSP를 쓰거나 WAS(Tomcat 등)에 올릴 때 주로 사용 -->

  <!-- 메타정보 -->
  <name>hello</name>
  <description>Demo project for Spring Boot</description>
  <url/> <!-- 프로젝트 공식 사이트 주소 기입 가능 (생략 가능) -->

  <!-- (필수는 아님) 프로젝트 라이선스 정보. 오픈소스는 꼭 명시 -->
  <licenses>
    <license/>
  </licenses>

  <!-- (선택) 개발자 정보. 여러 명도 등록 가능 -->
  <developers>
    <developer/>
  </developers>

  <!-- (선택) GitHub 등 버전 관리 시스템 정보 -->
  <scm>
    <connection/>
    <developerConnection/>
    <tag/>
    <url/>
  </scm>

  <!-- ✅ 자바 버전 명시 -->
  <properties>
    <java.version>17</java.version>
    <!-- 자바 17을 사용한다는 의미입니다.
         최신 LTS(Long-Term Support) 버전이라서 Spring Boot에서도 권장 -->
  </properties>

  <!-- ✅ 외부 라이브러리(Dependency) 설정 -->
  <dependencies>

    <!-- 1. Thymeleaf 템플릿 엔진 (HTML을 서버에서 동적으로 생성할 때 사용) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <!-- 2. Spring Web (웹서버, MVC, REST API 등 웹 기능 전반) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- 3. 개발 편의 도구: 코드 수정 시 서버 자동 재시작 등 개발자 경험 개선 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope> <!-- 실행 중에만 사용 -->
      <optional>true</optional> <!-- 운영 환경엔 포함되지 않음 -->
    </dependency>

    <!-- 4. 내장 톰캣 대신 외부 서버에 배포할 경우: 톰캣을 별도 제공받기 위해 provided로 설정 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope> <!-- 톰캣이 외부 서버에서 제공된다는 뜻 -->
    </dependency>

    <!-- 5. 테스트 도구 (JUnit, Assert 등 단위 테스트 작성 시 필수) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope> <!-- 테스트 코드를 실행할 때만 사용 -->
    </dependency>

  </dependencies>

  <!-- ✅ 빌드(컴파일, 실행 등)에 필요한 플러그인 정의 -->
  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <!-- 이 플러그인이 있어야 `mvn spring-boot:run` 실행 가능.
             war/jar 빌드도 이 플러그인을 통해 수행 -->
      </plugin>
    </plugins>
  </build>

</project>
